--
-- Copyright (C) 2012 Singly, Inc. All Rights Reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions are met:
--    * Redistributions of source code must retain the above copyright
--      notice, this list of conditions and the following disclaimer.
--    * Redistributions in binary form must reproduce the above copyright
--      notice, this list of conditions and the following disclaimer in the
--      documentation and/or other materials provided with the distribution.
--    * Neither the name of the Locker Project nor the
--      names of its contributors may be used to endorse or promote products
--      derived from this software without specific prior written permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
-- ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
-- WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
-- DISCLAIMED. IN NO EVENT SHALL THE LOCKER PROJECT BE LIABLE FOR ANY
-- DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-- (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
-- LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
-- ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-- (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
-- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-- Given a profile that is currently being processed by the specified worker,
-- mark the work as complete and schedule it for a future time.
--
-- If the profile is not currently be processed by this worker, noop.
--
-- If the profile is already scheduled for processing a sooner time,
-- don't reschedule it.

local schedule    = KEYS[1]
local working_set = KEYS[2]     -- hashtable (profile, worker_info)
local worker_info = KEYS[3]     -- expiring hashtable of metadata

local profile = ARGV[1]
local now = tonumber(ARGV[2])     -- current time
local nextrun = tonumber(ARGV[3]) -- next scheduled time for this profile
local info = ARGV[4]              -- info channel

-- Convert the profile into profile@service by removing the _schedule
-- postfix
local service = string.gsub(schedule, "_schedule", "")
local fullid = string.format("%s@%s", profile, service)

-- If the worker info indicates we are working on a different profile,
-- noop
if redis.call('HGET', worker_info, "profile") ~= fullid then
   return nil
end

-- If the caller is not the worker responsible for this work, noop out
if redis.call('HGET', working_set, fullid) ~= worker_info then
   return nil
end

-- Calculate runtime stats and publish to info channel
-- (this is in seconds)
local runtime = now - redis.call('HGET', worker_info, "started")
local msg = string.format("runtime %d %s", runtime, fullid)
redis.call('PUBLISH', info, msg);

-- Clean up
redis.call('HDEL', working_set, fullid);
redis.call('HDEL', worker_info, "started", "scheduled", "profile");

-- If no nextRun time is provided, do not attempt to re-schedule
if (not nextrun) then
   return nil
else
   -- Schedule this profile for future processing, if it's not already
   -- scheduled for a sooner point in time
   local curr_nextrun = tonumber(redis.call('ZSCORE', schedule, profile))
   if (not curr_nextrun or curr_nextrun > nextrun) then
      redis.call('ZADD', schedule, nextrun, profile)
      return nextrun
   else
      return curr_nextrun
   end
end



/*
* Copyright (C) 2012 Singly, Inc. All Rights Reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*    * Redistributions of source code must retain the above copyright
*      notice, this list of conditions and the following disclaimer.
*    * Redistributions in binary form must reproduce the above copyright
*      notice, this list of conditions and the following disclaimer in the
*      documentation and/or other materials provided with the distribution.
*    * Neither the name of the Locker Project nor the
*      names of its contributors may be used to endorse or promote products
*      derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
* ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL THE LOCKER PROJECT BE LIABLE FOR ANY
* DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// Helper module for sup testing. Processes any profiles immediately w/ jitter and
// the possibility of out-right failure. Possible outcomes:
// - Respond w/ jitter
// - Infinite loop
// - Self-terminated exit
// - Failure to send heartbeat
process.on('message', function (msg) {
  if (msg.type === "work") {
    var prob = Math.random();
    if (prob < 0.05) {
      // Infinite loop (5%)
      while (true) ;
    } else if (prob < 0.10) {
      // Self-terminated exit (5%)
      process.exit(1);
    } else {
      // Normal case (90%)
      var parts = msg.id.split("@");
      var resp = {type: "completed",
                  id: msg.id,
                  workerId: msg.workerId,
                  profile: parts[0],
                  service: parts[1],
                  nextRun: Date.now + 600000};
      setTimeout(function () { process.send(resp); },
                 Math.round(Math.random() * 10));
    }
  } else {
    console.log("suptest_roundtrip unexpected message: " + JSON.stringify(msg));
  }
});

// Send a keep-alive every 500ms, but 10% of the time, fail to do that
setInterval(function () { if (Math.random() > 0.1) process.send({type: "alive"}); }, 500);

// Notify the supervisor we're ready to go
process.send({type: "ready"});

{
  "author": {
    "name": "Morten Siebuhr",
    "email": "sbhr@sbhr.dk"
  },
  "name": "statsd-client",
  "description": "Yet another client for Etsy's statsd",
  "keywords": [
    "statsd",
    "client",
    "metrics",
    "udp"
  ],
  "version": "0.0.12",
  "homepage": "https://github.com/msiebuhr/node-statsd-client",
  "bugs": "https://github.com/msiebuhr/node-statsd-client/issues",
  "repository": {
    "type": "git",
    "url": "git://github.com/msiebuhr/node-statsd-client.git"
  },
  "main": "lib/statsd-client.js",
  "dependencies": {},
  "devDependencies": {
    "chai": "~1.3.0",
    "jshint": "~0.9.1",
    "mocha": "~1.6.0"
  },
  "scripts": {
    "prepublish": "mocha; jshint lib/ test/",
    "test": "mocha -R spec; jshint lib/ test/"
  },
  "optionalDependencies": {},
  "readme": "node-statsd-client\n==================\n\nNode.js client for [statsd](https://github.com/etsy/statsd).\n\n[![Build Status](https://secure.travis-ci.org/msiebuhr/node-statsd-client.png?branch=master)](http://travis-ci.org/msiebuhr/node-statsd-client)\n\nQuick tour\n----------\n\n    var sdc = new require('statsd-client')({host: 'statsd.example.com'});\n\n\tvar timer = new Date();\n\tsdc.increment('some.counter'); // Increment by one.\n\tsdc.gauge('some.gauge', 10); // Set gauge to 10\n\tsdc.timing('some.timer', timer); // Calculates time diff\n\n\tsdc.close(); // Optional - stop NOW\n\nAPI\n---\n\n### Initialization\n\n    var SDC = require('statsd-client'),\n        sdc = new SDC({host: 'statsd.example.com', port: 8124, debug: true});\n\nAvailable options:\n\n * `host`: Where to send the stats (default `localhost`).\n * `debug`: Print what is being sent to stderr (default `false`).\n * `port`: Port to contact the statsd-daemon on (default `8125`).\n * `prefix`: Prefix all stats with this value (default `\"\"`).\n * `socket_timeout`: Auto-closes the socket after this long without activity\n   (default 1000 ms; 0 disables this).\n\n### Counting stuff\n\nCounters are supported, both as raw `.counter(metric, delta)` and with the\nshortcuts `.increment(metric, [delta=1])` and `.decrement(metric, [delta=-1])`:\n\n    sdc.increment('systemname.subsystem.value'); // Increment by one\n\tsdc.decrement('systemname.subsystem.value', -10); // Decrement by 10\n\tsdc.counter('systemname.subsystem.value, 100); // Indrement by 100\n\n### Gauges\n\nSends an arbitrary number to the back-end:\n\n\tsdc.gauge('what.you.gauge', 100);\n\n### Sets\n\nSend unique occurences of events between flushes to the back-end:\n\n\tsdc.set('your.set', 200);\n\n### Delays\n\nKeep track of how fast (or slow) your stuff is:\n\n\tvar start = new Date();\n\tsetTimeout(function () {\n\t\t\tsdc.timing('random.timeout', start);\n\t}, 100 * Math.random());\n\nIf it is given a `Date`, it will calculate the difference, and anything else\nwill be passed straight through.\n\nAnd don't let the name (or nifty interface) fool you - it can measure any kind\nof number, where you want to see the distribution (content lengths, list items,\nquery sizes, ...)\n\n### Stream helpers\n\nThere is some helpers for measuring what's going though streams:\n\n    var sdc = new StatsDClient({...});\n\n\tvar source = fs.createReadStream('some_file.txt'),\n\t\tdest = fs.createWriteStream('/dev/null');\n\n\t// Option 1: Attach hooks directly to a stream (most effeicient)\n\tsdc.helpers.streamSize('key_for_counter', source);\n\n\t// Option 2: Pipe through proxy-stream with hooks attached\n\tsource\n\t    .pipe(sdc.helpers.streamLatency('key_for_timer'))\n\t\t.pipe(dest);\n\nThis will both measure the amount of data sent through the system\n(`.streamSize(key, [stream])`) and how long it takes to get i through\n(`.streamLatency(key, [stream])`). It is also possible to measure the total\nbandwith of the stream using `.streamBandwidth(key, [stream])`.\n\n### Express helper\n\nThere's also a helper for measuring stuff in [Express.js](http://expressjs.com)\nvia middleware:\n\n    var app = express();\n\t    sdc = new StatsDClient({...});\n\t\n\tapp.use(sdc.helpers.getExpressMiddleware('somePrefix'));\n\t// or\n\tapp.get('/',\n\t\tsdc.helpers.getExpressMiddleware('otherPrefix'),\n\t\tfunction (req, res, next) { req.pipe(res); });\n\n\tapp.listen(3000);\n\nThis will count responses by status-code (`prefix.<statuscode>`) and the\noverall response-times.\n\nIt can also measure per-URL (e.g. PUT to `/:user/:thing` will become\n`PUT_user_thing` by setting the `timeByUrl: true` in the `options`-object:\n\n    app.use(sdc.helpers.getExpressMiddleware('prefix', { timeByUrl: true }));\n\nAs the names can become rather odd in corner-cases (esp. regexes and non-REST\ninterfaces), you can specify another value by setting `res.locals.statsdUrlKey`\nat a later point.\n\n### Stopping gracefully\n\nBy default, the socket is closed if it hasn't been used for a second (see\n`socket_timeout` in the init-options), but it can also be force-closed with\n`.close()`:\n\n\tvar start = new Date();\n\tsetTimeout(function () {\n\t\tsdc.timing('random.timeout', start); // 2 - implicitly re-creates socket.\n\t\tsdc.close(); // 3 - Closes socket after last use.\n\t}, 100 * Math.random());\n    sdc.close(); // 1 - Closes socket early.\n\nThe call is idempotent, so you can call it \"just to be sure\". And if you submit\nnew metrics later, the socket will automatically be re-created, and a new\ntimeout-timer started.\n\n### Prefix-magic\n\nThe library supports getting \"child\" clients with extra prefixes, to help with\nmaking sane name-spacing in apps:\n\n    // Create generic client\n    var sdc = new StatsDClient({host: 'statsd.example.com', prefix: 'systemname');\n\tsdc.increment('foo'); // Increments 'systemname.foo'\n\t... do great stuff ...\n\n    // Subsystem A\n\tvar sdcA = sdc.getChildClient('a');\n\tsdcA.increment('foo'); // Increments 'systemname.a.foo'\n\n    // Subsystem B\n\tvar sdcB = sdc.getChildClient('b');\n\tsdcB.increment('foo'); // Increments 'systemname.b.foo'\n\nInternally, they all use the same socket, so calling `.close()` on any of them\nwill allow the entire program to stop gracefully.\n\nWhat's broken\n-------------\n\nCheck the [GitHub issues](https://github.com/msiebuhr/node-statsd-client/issues).\n\nLICENSE\n-------\n\nISC - see\n[LICENSE](https://github.com/msiebuhr/node-statsd-client/blob/master/LICENSE).\n",
  "readmeFilename": "README.md",
  "_id": "statsd-client@0.0.12",
  "dist": {
    "shasum": "f61060316eb948b358cdaaf843d8b963874228bd"
  },
  "_from": "statsd-client@",
  "_resolved": "https://registry.npmjs.org/statsd-client/-/statsd-client-0.0.12.tgz"
}

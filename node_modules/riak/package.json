{
  "name": "riak",
  "version": "1.0.3",
  "description": "Riak client for node.js. Used in production by Voxer.com",
  "homepage": "http://github.com/mranney/node_riak",
  "author": {
    "name": "Matt Ranney",
    "email": "mjr@ranney.com"
  },
  "keywords": [
    "riak",
    "database"
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/mranney/node_riak.git"
  },
  "dependencies": {
    "poolee": "~0.4"
  },
  "devDependencies": {
    "specify": "~1.0.0"
  },
  "scripts": {
    "test": "node test.js"
  },
  "main": "./riak.js",
  "readme": "Riak - a node.js riak client\n===\n\nThis is the client that we use at Voxer.  It's been tested very thoroughly in\nour environment and for our usage patterns, but there may be glaring holes in\nfunctionality that we don't use.\n\nIt uses the [poolee](https://github.com/dannycoates/poolee) module to do load\nbalancing and failure detection so you don't necessarily need a load balancer\nbetween node and Riak.\n\nThe library has support for timing each request, resolving siblings, and conditional retry.\n\n## API\n\n### Constructor\n\n    var RiakClient = require(\"riak\"), client;\n    client = new RiakClient([\"host1:port1\", \"host2:port2\", ... \"hostn:portn\"], \"client_id\", \"pool_name\");\n\nThe `RiakClient` constructor takes a list of host:port pairs, each of which are equivalent nodes in a Riak cluster.\n\n## Example\n\nTry running the example and you should see something like this:\n\n    ranney-imac:~/work/node_riak (master)$ curl -X DELETE localhost:8098/riak/bucket_1/key_1\n    ranney-imac:~/work/node_riak (master)$ node example.js\n    metric: counter, riak_retry_filter|404_GET=1\n    metric: histogram, LB_Pool_pool_name|GET|bucket_1=51\n    metric: histogram, LB_Pool_pool_name|PUT|bucket_1=7\n    204:  { counter: 1 }\n    ranney-imac:~/work/node_riak (master)$ node example.js\n    metric: histogram, LB_Pool_pool_name|GET|bucket_1=9\n    metric: histogram, LB_Pool_pool_name|PUT|bucket_1=5\n    204:  { counter: 2 }\n    ranney-imac:~/work/node_riak (master)$ node example.js\n    metric: histogram, LB_Pool_pool_name|GET|bucket_1=9\n    metric: histogram, LB_Pool_pool_name|PUT|bucket_1=4\n    204:  { counter: 3 }\n\n---\n\n## Create a client\n\n```js\nvar RiakClient = require(\"riak\");\n\n// list of riak servers you'd like to load balance over (poolee handles this).\nvar servers = [\"127.0.0.1:8098\"]\n\n// should be unique, used by riak if you don't supply a vector clock\n// default value: random integer\nvar client_id = \"docs-client\"\n\n// informative name for logging purposes etc\nvar pool_name = \"docs-pool\"\n\nvar client = new RiakClient(servers, client_id, pool_name);\n```\n\nFrom here on we will refer to `client` as an instance of RiakClient.\n\n### Enable debug mode\n```js\n// shows an activity trace.\nclient.debug_mode = false;\n```\n\n### Events emitted by `client`\nTODO: more info on how this is collected and what it means, and what types of\nmetrics are collected.\n\n```js\nclient.on(\"metrics\", function (type, key, val) {\n    // `type` is either \"histogram\" or \"counter\".\n    // Information is gleaned from requests made by poolee, and tells you about\n    // downed nodes, retries, and request duration.\n    console.log(\"metric: \" + type + \", \" + key + \"=\" + val);\n});\n```\n\n### client.get(bucket, key, options, callback)\n\n`bucket`: which bucket you want to look in, \"/riak/\" is automatically prepended\n    for you (all the functions do this).\n\n`key`: the name of the thing you want\n\n`callback`: mandatory callback function, invoked ala `callback(error, response, object)`\n\n`options`: let caller specify http headers that riak may care about such as\nX-Riak-Vclock and Content-Type.\n\nWhen `options.return_body = true`, it which will return the body and a status\ncode of 200 instead of 204.\n\nContent-Type is assumed to be application/json by default and will be stored as\nstringified json unless otherwise specified.\n\nThe default `options` are\n\n```js\nvar options = {\n    http_headers: {},\n    mime_types: [], // list of content-types. TODO: never referenced in the code?\n    return_body: false,\n\n    // more supported options:\n    // r_val: <number>, // default is whatever Riak's default is, usually basic quorum\n    // w_val: <number>, // default is whatever Riak's default is, usually basic quorum\n    // retry: <bool>,   // default = true, will retry gets with exponential backoff when recieving a 404\n    // parse: <bool>,   // default = true, will parse riak response assuming it is json\n    // resolver: <fn>,  // no default = used to resolve sibling values\n}\nclient.get(bucket, key, options, callback)\n```\n\n### client.put(bucket, key, message, options, callback)\n\n### client.post(url, value, options, callback)\nUseful for inserting something when you don't care what the key is. Riak\nresponds with a `location` header that tells you the key that was generated for\nyou:\n\n```js\nvar value = { riak: \"is fun\" }\n    bucket = \"bucket_1\",\n    url = \"/riak/\" + bucket,\n    options = {};\n\nclient.post(url, JSON.stringify(value), function(err, res, obj) {\n    assert.ok(!err);\n    assert.ok(res.headers.location !== null);\n\n    var uri = res.headers.location.split(\"/\"),\n        key = uri[uri.length - 1];\n\n    client.get(bucket, key, options, function(err, res, obj) {\n        assert.deepEqual(obj, value);\n    });\n});\n```\n\n### client.replace(bucket, key, new_val, options, callback)\n\n### client.modify(bucket, key, mutator, options, callback)\nThis mutator function does a simple increment of prop2 with no error checking.\nIt does a GET and then a PUT with your modifications.\n\n```js\nclient.modify(\"bucket_1\", \"key_1\", function mutator(old, done) {\n    var newobj = old || {};\n    newobj.counter = newobj.counter || 0;\n    newobj.counter++;\n    done(newobj);\n}, {}, function (err, res, obj) {\n    console.error(res.statusCode + \": \", obj);\n    process.exit();\n});\n```\n\n### client.append(bucket, key, new_val, options, callback)\n\nThe value stored at `key` must be an array. Attempts to append `new_val` to the\nend of the array. If `new_val` is already in the array, it will not be added\nagain.\n\nInternally it uses `client.modify` with a mutator function to accomplish this.\n\n### client.del(bucket, key, callback)\n\n### client.post(url, post_body, callback)\n\n---\n\n## Semi-deprecated / not in use / possibly not working\n### client.solr(bucket, query, limit, callback)\nMake a request to riak with a url of the form\n\n    /solr/<bucket>/select?q=<query>&wt=json&rows=<limit>\n\n## LICENSE - \"MIT License\"\n\nCopyright (c) 2012 Matthew Ranney, http://ranney.com/\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "riak@1.0.3",
  "dist": {
    "shasum": "e57b47e2f592292e3fc80f22ad6e1d7dcfed4437"
  },
  "_resolved": "git+https://github.com/Singly/node_riak.git#c2ddbbbef112e1424da5fc2569513fc6d259ff16",
  "_from": "riak@git+https://github.com/Singly/node_riak.git"
}

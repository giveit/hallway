var dns = require('dns');
var socket = require('dgram').createSocket('udp4');

var async = require('async');

function defaultCallback(err) {
  if (err) {
    console.error('[statsd-singly] Error:', err);
  }
}

function Metric(metrics, suffix) {
  if (!(this instanceof Metric)) {
    return new Metric(metrics, suffix);
  }

  this.updateTime = 0;

  this.metrics = metrics;
  this.suffix = suffix;

  return this;
}

Metric.prototype.sample = function (rate) {
  if (Math.random() <= rate) {
    this.rate = '|@' + rate;
  } else {
    this.pass = true;
  }

  return this;
};

Metric.prototype.send = function () {
  if (this.pass) {
    return this.callback();
  }

  if (typeof(this.metrics) === 'string') {
    this.metrics = [this.metrics];
  }

  if (Array.isArray(this.metrics)) {
    var array = this.metrics;

    var temp = {};

    array.forEach(function (e) {
      temp[e] = '';
    });

    this.metrics = temp;
  }

  var self = this;

  async.forEachSeries(Object.keys(this.metrics), function (key, cbForEach) {
    self.metrics[key] += self.suffix;

    if (self.rate !== undefined) {
      self.metrics[key] += self.rate;
    }

    var buffer = new Buffer(key + ':' + self.metrics[key]);

    socket.send(buffer, 0, buffer.length, self.port, self.ip || self.host,
      cbForEach);
  }, function (err) {
    self.callback(err);
  });
};

var Client = function (host, port, sendCallback) {
  this.metric.prototype.host = host;
  this.metric.prototype.port = port;

  if (!sendCallback) {
    sendCallback = defaultCallback;
  }

  this.metric.prototype.callback = sendCallback;
};

Client.prototype.init = function (cb) {
  this.updateAddress(cb);
};

Client.prototype.updateAddress = function (cb) {
  var self = this;

  if (!cb) {
    cb = defaultCallback;
  }

  dns.lookup(self.metric.prototype.host, function (err, address) {
    if (err || !address) return cb(err);

    self.updateTime = Date.now();
    self.metric.prototype.ip = address;

    cb();
  });
};

Client.prototype.metric = Metric;

Client.prototype.gauge = function (metrics) {
  return new this.metric(metrics, '|g');
};

Client.prototype.timing = function (metrics) {
  return new this.metric(metrics, '|ms');
};

Client.prototype.increment = function (metrics) {
  return new this.metric(metrics, '1|c');
};

Client.prototype.decrement = function (metrics) {
  return new this.metric(metrics, '-1|c');
};

Client.prototype.modify = function (metrics) {
  return new this.metric(metrics, '|c');
};

exports.StatsD = Client;
